<!--
  ~ Licensed to the Apache Software Foundation (ASF) under one
  ~ or more contributor license agreements.  See the NOTICE file
  ~ distributed with this work for additional information
  ~ regarding copyright ownership.  The ASF licenses this file
  ~ to you under the Apache License, Version 2.0 (the
  ~ "License"); you may not use this file except in compliance
  ~ with the License.  You may obtain a copy of the License at
  ~
  ~   http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.quorum.gauge</groupId>
    <artifactId>quorum-acceptance-tests</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <java.version>14</java.version>
        <generated.sol.dir>${project.build.directory}/generate-sources/sol</generated.sol.dir>
        <skipGenerateSol>false</skipGenerateSol>
        <skipToolsCheck>false</skipToolsCheck>

        <!-- properties from gauge-maven-plugin configuration -->
        <tags>basic</tags> <!-- which tests to run by default -->
        <env>run-local</env> <!-- Gauge environment being used -->

        <!-- dependencies -->
        <web3j-quorum.version>4.8.4</web3j-quorum.version>
        <web3j.version>4.8.5</web3j.version>
        <commons-lang.version>2.6</commons-lang.version>
        <docker-java.version>3.2.2</docker-java.version>
        <apache-sshd.version>2.4.0</apache-sshd.version>
        <i2p-eddsa.version>0.3.0</i2p-eddsa.version>
        <!-- this must be the same value in Dockerfile
            via `gauge install java -version <x.y.z>`  -->
        <gauge-java.version>0.7.15</gauge-java.version>

        <!-- plugins -->
        <gauge-maven-plugin.version>1.5.0</gauge-maven-plugin.version>
        <web3j-maven-plugin.version>4.8.2</web3j-maven-plugin.version>
        <builder-maven-plugin.version>3.0.0</builder-maven-plugin.version>
        <maven-site-plugin.version>3.7.1</maven-site-plugin.version>
        <maven-project-info-reports-plugin.version>3.0.0</maven-project-info-reports-plugin.version>
        <github.site-maven-plugin.version>0.12</github.site-maven-plugin.version>
        <maven-replacer-plugin.version>1.5.3</maven-replacer-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>4.9.0</version>
        </dependency>
        <dependency>
            <groupId>org.web3j</groupId>
            <artifactId>core</artifactId>
            <version>${web3j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.thoughtworks.gauge</groupId>
            <artifactId>gauge-java</artifactId>
            <version>${gauge-java.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.web3j</groupId>
            <artifactId>quorum</artifactId>
            <version>${web3j-quorum.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.web3j</groupId>
                    <artifactId>core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>commons-lang</groupId>
            <artifactId>commons-lang</artifactId>
            <version>${commons-lang.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-core</artifactId>
            <version>${docker-java.version}</version>
        </dependency>
        <dependency>
            <groupId>com.github.docker-java</groupId>
            <artifactId>docker-java-transport-httpclient5</artifactId>
            <version>${docker-java.version}</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.dataformat</groupId>
            <artifactId>jackson-dataformat-xml</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.sshd</groupId>
            <artifactId>sshd-core</artifactId>
            <version>${apache-sshd.version}</version>
        </dependency>
        <dependency>
            <!-- this is to support SSHClient using Apache SSHD when connecting to openssh asking for eddsa  -->
            <groupId>net.i2p.crypto</groupId>
            <artifactId>eddsa</artifactId>
            <version>${i2p-eddsa.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.vault</groupId>
            <artifactId>spring-vault-core</artifactId>
            <version>2.2.2.RELEASE</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core -->
        <dependency>
            <groupId>org.openjdk.nashorn</groupId>
            <artifactId>nashorn-core</artifactId>
            <version>15.0</version>
        </dependency>
    </dependencies>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
                <plugin>
                    <groupId>com.thoughtworks.gauge.maven</groupId>
                    <artifactId>gauge-maven-plugin</artifactId>
                    <version>${gauge-maven-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>com.google.code.maven-replacer-plugin</groupId>
                    <artifactId>replacer</artifactId>
                    <version>${maven-replacer-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <fork>true</fork>
                </configuration>
            </plugin>
            <plugin>
                <!--
                    This is a workaround solution:
                    - `web3j-maven-plugin` has runtime dependency on `solcJ-all` jar which is stored
                      in ethereum maven repo which is hosted in Bintray
                    - As Bintray is going to be sunset, we store `solcJ-all` jar locally to avoid
                      downloading from Bintray
                -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <id>install-solJ-all</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <configuration>
                            <file>${basedir}/extra/solcJ-all-0.4.25.jar</file>
                            <pomFile>${basedir}/extra/solcJ-all-0.4.25.pom</pomFile>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.thoughtworks.gauge.maven</groupId>
                <artifactId>gauge-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>run-gauge</id>
                        <phase>test</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <flags>
                        <flag>--hide-suggestion</flag>
                        <flag>--sort</flag>
                    </flags>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>${build-helper-maven-plugin.version}</version>
                <executions>
                    <execution>
                        <id>02-add-source-folder</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${generated.sol.dir}</source>
                            </sources>
                        </configuration>
                    </execution>
                    <execution>
                        <id>02-add-sol-bin</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>add-resource</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${generated.sol.dir}</directory>
                                    <includes>
                                        <include>**/*.bin</include>
                                        <include>**/*.json</include>
                                    </includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>auto</id>
            <properties>
                <!-- run Terraform destory after test -->
                <network.forceDestroy>false</network.forceDestroy>

                <!-- enable remote infrastructure. Will be set to true if profile `infra` is activated -->
                <infra.enabled>false</infra.enabled>
                <!--
                This value is to differentiate between multiple `mvn` runs.
                Github Actions need to inject different values for different runs so
                it can be aggregated at the end.
                -->
                <auto.jobid>local</auto.jobid>
                <auto.outputDir>/tmp</auto.outputDir>

                <!-- global configuration for exec plugin -->
                <exec.daemonThreadJoinTimeout>15000</exec.daemonThreadJoinTimeout>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>1.0b3</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                        <executions>
                            <execution>
                                <id>check-required-tools</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${skipToolsCheck}</skip>
                                    <!-- make sure we fail fast if tools are not installed -->
                                    <failOnError>true</failOnError>
                                    <exportAntProperties>false</exportAntProperties>
                                    <target name="Check required tools and display their info">
                                        <ant antfile="${basedir}/src/main/ant/helper.xml"
                                             target="tools"/>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>extract</id>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <phase>initialize</phase>
                                <configuration>
                                    <exportAntProperties>true</exportAntProperties>
                                    <target name="Extract network location and profile">
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
                                        <macrodef name="parser">
                                            <attribute name="raw" default="undefined"/>
                                            <attribute name="prefix" default="networks"/>
                                            <attribute name="folderPropertyName"/>
                                            <attribute name="defaultFolder" default="target/tf-scratchpad"/>
                                            <attribute name="profilePropertyName"/>
                                            <attribute name="defaultProfile" default="undefined"/>
                                            <sequential>
                                                <mkdir dir="@{defaultFolder}"/>
                                                <local name="folder_extract"/>
                                                <local name="profile_extract"/>
                                                <local name="silent"/>
                                                <echo message="Extract from: @{raw}" level="info"/>
                                                <propertyregex property="folder_extract"
                                                               input="@{raw}"
                                                               regexp="(@{prefix}/[0-9a-zA-Z-_\.]+)::([0-9a-zA-Z-_\.]+)"
                                                               select="\1"
                                                               casesensitive="false"
                                                               defaultValue="@{defaultFolder}"/>
                                                <propertyregex property="profile_extract"
                                                               input="@{raw}"
                                                               regexp="(@{prefix}/[0-9a-zA-Z-_\.]+)::([0-9a-zA-Z-_\.]+)"
                                                               select="\2"
                                                               casesensitive="false"
                                                               defaultValue="@{defaultProfile}"/>

                                                <property name="@{folderPropertyName}" value="${folder_extract}"/>
                                                <property name="@{profilePropertyName}" value="${profile_extract}"/>
                                                <if>
                                                    <not>
                                                        <equals arg1="${profile_extract}" arg2="undefined"/>
                                                    </not>
                                                    <then>
                                                        <touch
                                                            file="${folder_extract}/terraform.${profile_extract}.tfvars"
                                                            mkdirs="true"/>
                                                    </then>
                                                </if>
                                                <echo level="info" message="@{folderPropertyName}=${folder_extract}"/>
                                                <echo level="info" message="@{profilePropertyName}=${profile_extract}"/>
                                                <exec executable="terraform" dir="${folder_extract}"
                                                      failonerror="false" failifexecutionfails="false">
                                                    <arg line="workspace new ${profile_extract}"/>
                                                </exec>
                                            </sequential>
                                        </macrodef>
                                        <local name="networkRaw"/>
                                        <condition property="networkRaw" value="${network.target}" else="${tags}">
                                            <isset property="network.target"/>
                                        </condition>
                                        <parser raw="${networkRaw}" prefix="networks"
                                                folderPropertyName="network.folder"
                                                profilePropertyName="network.profile"/>
                                        <condition property="network.skipDestroy" value="true" else="false">
                                            <or>
                                                <isfalse value="${network.forceDestroy}"/>
                                                <equals arg1="${network.profile}" arg2="undefined"/>
                                            </or>
                                        </condition>
                                        <condition property="network.skipApply" value="true" else="false">
                                            <equals arg1="${network.profile}" arg2="undefined"/>
                                        </condition>
                                        <condition property="network.skipWait" value="true" else="false">
                                            <equals arg1="${network.profile}" arg2="undefined"/>
                                        </condition>
                                        <echo level="info" message="Auto-destroying network: ${network.forceDestroy}"/>
                                        <condition property="infra.disabled" value="false" else="true">
                                            <istrue value="${infra.enabled}"/>
                                        </condition>
                                        <if>
                                            <equals arg1="${infra.enabled}" arg2="true"/>
                                            <then>
                                                <parser raw="${infra.target}" prefix="networks/_infra"
                                                        folderPropertyName="infra.folder"
                                                        profilePropertyName="infra.profile"/>
                                                <condition property="infra.skipDestroy" value="false" else="true">
                                                    <istrue value="${infra.forceDestroy}"/>
                                                </condition>
                                                <echo level="info"
                                                      message="Auto-destroying infra: ${infra.forceDestroy}"/>
                                            </then>
                                            <else>
                                                <property name="infra.skipDestroy" value="true"/>
                                                <property name="infra.skipApply" value="true"/>
                                                <property name="infra.skipWait" value="true"/>
                                            </else>
                                        </if>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>infra.terraform-init</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${infra.skipApply}</skip>
                                    <commandlineArgs>init</commandlineArgs>
                                    <workingDirectory>${infra.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infra.terraform-workspace</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${infra.skipApply}</skip>
                                    <commandlineArgs>workspace select ${infra.profile}</commandlineArgs>
                                    <workingDirectory>${infra.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infra.terraform-apply</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${infra.skipApply}</skip>
                                    <commandlineArgs>apply --auto-approve -var-file terraform.${infra.profile}.tfvars
                                        -var tfvars_outdir='${basedir}/${network.folder}' -var
                                        properties_outdir='${project.build.outputDirectory}' -var run_on='${env}'
                                    </commandlineArgs>
                                    <workingDirectory>${infra.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>infra.wait</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${infra.skipWait}</skip>
                                    <executable>java</executable>
                                    <arguments>
                                        <argument>-classpath</argument>
                                        <classpath/>
                                        <argument>com.quorum.gauge.DockerWaitMain</argument>
                                        <argument>infra</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <id>network.terraform-init</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${network.skipApply}</skip>
                                    <commandlineArgs>init</commandlineArgs>
                                    <workingDirectory>${network.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>network.terraform-workspace</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${network.skipApply}</skip>
                                    <commandlineArgs>workspace select ${network.profile}</commandlineArgs>
                                    <workingDirectory>${network.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>network.terraform-apply</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${network.skipApply}</skip>
                                    <commandlineArgs>apply --auto-approve -var-file terraform.${network.profile}.tfvars
                                        -var properties_outdir='${project.build.outputDirectory}' -var
                                        gauge_env_outdir='${basedir}/env/${env}'
                                    </commandlineArgs>
                                    <workingDirectory>${network.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>network.wait</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>process-test-resources</phase>
                                <configuration>
                                    <skip>${network.skipWait}</skip>
                                    <executable>java</executable>
                                    <arguments>
                                        <argument>-classpath</argument>
                                        <classpath/>
                                        <argument>com.quorum.gauge.DockerWaitMain</argument>
                                        <argument>network</argument>
                                    </arguments>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- this execution is run after Gauge test -->
                                <id>network.terraform-destroy</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration>
                                    <skip>${network.skipDestroy}</skip>
                                    <commandlineArgs>destroy --auto-approve -var-file
                                        terraform.${network.profile}.tfvars
                                    </commandlineArgs>
                                    <workingDirectory>${network.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <!-- this execution is run after Gauge test -->
                                <id>infra.terraform-destroy</id>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration>
                                    <skip>${infra.skipDestroy}</skip>
                                    <commandlineArgs>destroy --auto-approve -var-file
                                        terraform.${infra.profile}.tfvars
                                    </commandlineArgs>
                                    <workingDirectory>${infra.folder}</workingDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>extract-test-summary</id>
                                <goals>
                                    <goal>java</goal>
                                </goals>
                                <phase>test</phase>
                                <configuration>
                                    <skip>${skipTests}</skip>
                                    <mainClass>com.quorum.gauge.TestSummaryMain</mainClass>
                                    <!-- This will produce failures.txt and summary.txt in the output folder -->
                                    <commandlineArgs>${auto.jobid}
                                        ${project.build.directory}/gauge/reports/xml-report/result.xml ${auto.outputDir}
                                    </commandlineArgs>
                                </configuration>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>terraform</executable>
                            <environmentVariables>
                                <TF_VAR_network_name>${env}</TF_VAR_network_name>
                                <TF_VAR_output_dir>${auto.outputDir}</TF_VAR_output_dir>
                            </environmentVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>infra</id>
            <activation>
                <property>
                    <name>infra.target</name>
                </property>
            </activation>
            <properties>
                <infra.enabled>true</infra.enabled>
                <infra.forceDestroy>false</infra.forceDestroy>
            </properties>
        </profile>
        <profile>
            <id>outputDirForWindows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <auto.outputDir>${java.io.tmpdir}</auto.outputDir>
            </properties>
        </profile>
        <profile>
            <id>gaugeFailSafe</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.thoughtworks.gauge.maven</groupId>
                        <artifactId>gauge-maven-plugin</artifactId>
                        <configuration>
                            <flags>
                                <flag>--fail-safe</flag>
                                <flag>--hide-suggestion</flag>
                                <flag>--sort</flag>
                            </flags>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>generateSol</id>
            <activation>
                <property>
                    <name>skipGenerateSol</name>
                    <value>!true</value>
                </property>
            </activation>
            <properties>
                <defaultPermissionType>v1</defaultPermissionType>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>determine-permission-type</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <exportAntProperties>true</exportAntProperties>
                                    <target name="Determine permission type">
                                        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
                                        <!-- extract permission type from tags -->
                                        <propertyregex property="permission.type"
                                                       input="${tags}"
                                                       regexp="permissions-([^\.]*) &amp;&amp; ([0-9a-zA-Z-_\.]+)"
                                                       select="\1"
                                                       casesensitive="false"
                                                       defaultValue="${defaultPermissionType}"/>
                                        <echo level="info" message="permissionType=${permission.type}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>ant-contrib</groupId>
                                <artifactId>ant-contrib</artifactId>
                                <version>1.0b3</version>
                                <exclusions>
                                    <exclusion>
                                        <groupId>ant</groupId>
                                        <artifactId>ant</artifactId>
                                    </exclusion>
                                </exclusions>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.web3j</groupId>
                        <artifactId>web3j-maven-plugin</artifactId>
                        <version>${web3j-maven-plugin.version}</version>
                        <configuration>
                            <packageName>${project.groupId}.sol</packageName>
                            <soliditySourceFiles>
                                <directory>${basedir}/src/main/sol</directory>
                                <includes>
                                    <include>*.sol</include>
                                    <include>permissions/${permission.type}/*.sol</include>
                                </includes>
                            </soliditySourceFiles>
                            <sourceDestination>${generated.sol.dir}</sourceDestination>
                            <outputFormat>java,bin,abi</outputFormat>
                        </configuration>
                        <executions>
                            <execution>
                                <id>01-generate-sol</id>
                                <phase>generate-sources</phase>
                                <goals>
                                    <goal>generate-sources</goal>
                                </goals>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.web3j</groupId>
                                <artifactId>codegen</artifactId>
                                <version>${web3j-maven-plugin.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>

                    <plugin>
                        <groupId>com.google.code.maven-replacer-plugin</groupId>
                        <artifactId>replacer</artifactId>
                        <executions>
                            <execution>
                                <id>replace-binary-string-in-gen-sol-java</id>
                                <phase>process-sources</phase>
                                <goals>
                                    <goal>replace</goal>
                                </goals>
                                <configuration>
                                    <basedir>${generated.sol.dir}</basedir>
                                    <includes>
                                        <include>**/*.java</include>
                                    </includes>
                                    <replacements>
                                        <replacement>
                                            <token>(private static final String BINARY)\s*=\s*"[^"]+"\s*;</token>
                                            <value>$1 =
                                                com.quorum.gauge.common.SolBinUtils.readSolBin("com.quorum.gauge.sol",
                                                java.lang.invoke.MethodHandles.lookup().lookupClass());
                                            </value>
                                        </replacement>
                                    </replacements>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
